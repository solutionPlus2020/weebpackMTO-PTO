<?phpnamespace App\Controller;use App\Entity\Pays;use App\Entity\Produits;use App\Entity\TypePrestation;use App\Form\ProduitsType;use App\Repository\ProduitsRepository;use App\Repository\TypePrestationRepository;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\Routing\Annotation\Route;use Symfony\Component\Serializer\Normalizer\NormalizableInterface;use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;use Symfony\Component\Serializer\Serializer;/** * @Route("/produits") */class ProduitsController extends AbstractController{    /**     * @Route("/", name="produits_index", methods={"GET"})     *     */    public function index(ProduitsRepository $produitsRepository): Response    {        return $this->render('produits/index.html.twig', [            'produits' => $produitsRepository->findAll(),        ]);    }    /**     * @Route("/new", name="produits_new", methods={"GET","POST"})     */    public function new(Request $request): Response    {        $produit = new Produits();        $form = $this->createForm(ProduitsType::class, $produit);        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $entityManager = $this->getDoctrine()->getManager();            $entityManager->persist($produit);            $entityManager->flush();            //$manager->persist($produit);            //$manager->flush();            $this->addFlash(                'success',                "Votre Produit <strong>{$produit->getTitle()}</strong> a bien été enregistrée !"            );            return $this->redirectToRoute('produits_index');        }        return $this->render('produits/new.html.twig', [            'produit' => $produit,            'form' => $form->createView(),        ]);    }    /**     * @Route("/{id}/description", name="produits_description", methods={"GET"})     */    public function showP(Produits $produit): Response    {        return $this->render('produits/test.html.twig', [            'descriptions' => $produit->getDescriptions(),            'images' => $produit->getImages(),        ]);    }    /**     * @Route("/{id}", name="produits_show", methods={"GET"})     */    public function show(Produits $produit): Response    {        return $this->render('produits/show.html.twig', [            'test' => 'pto',            'produit' => $produit,            'images' => $produit->getImages(),            'descriptions' => $produit->getDescriptions()        ]);    }    /**     * @Route("/{id}/image", name="produits_images", methods={"GET"})     */    public function showImages(Produits $produit): Response    {        return $this->render('produits/image.html.twig', [            'images' => $produit->getImages(),        ]);    }    /**     * @Route("/{id}/edit", name="produits_edit", methods={"GET","POST"})     */    public function edit(Request $request, Produits $produit): Response    {        $form = $this->createForm(ProduitsType::class, $produit);        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $this->getDoctrine()->getManager()->flush();            return $this->redirectToRoute('produits_index');        }        return $this->render('produits/edit.html.twig', [            'produit' => $produit,            'form' => $form->createView(),        ]);    }    /**     * @Route("/{id}", name="produits_delete", methods={"DELETE"})     */    public function delete(Request $request, Produits $produit): Response    {        if ($this->isCsrfTokenValid('delete' . $produit->getId(), $request->request->get('_token'))) {            $entityManager = $this->getDoctrine()->getManager();            $entityManager->remove($produit);            $entityManager->flush();        }        return $this->redirectToRoute('produits_index');    }    /**     * @Route("/PTO/prestations", name="produits_PTO", methods={"GET"})     *     */    public function PTO(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseur("pto", 2);    }    /**     * @Route("/PTO/prestationCircuits", name="circuits_PTO", methods={"GET"})     *     */    public function PTOcircuit(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestation('pto',2,1);    }    /**     * @Route("/PTO/prestationSejours", name="sejours_PTO", methods={"GET"})     *     */    public function PTOsejours(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestation('pto',2,2);    }    /**     * @Route("/PTO/prestationWeekEnd", name="Weekends_PTO", methods={"GET"})     *     */    public function PTOWeekend(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestation('pto',2,3);    }    /**     * @Route("/MTO/prestation", name="produits_MTO", methods={"GET"})     *     */    public function MTO(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseur("mto", 1);    }    /**     * @Route("/PTO/Portugal", name="Portugal_PTO", methods={"GET"})     *     */    public function fecthPortugal(ProduitsRepository $produitsRepository): Response    {        return $this->ProduitByfourByPays('pto', 2, 3);    }    /**     * @Route("/PTO/CapVert", name="CapVert_PTO", methods={"GET"})     *     */    public function fecthCapVert(ProduitsRepository $produitsRepository): Response    {        return $this->ProduitByfourByPays('pto', 2, 4);    }    /**     * @Route("/PTO/Madere", name="Madere_PTO", methods={"GET"})     *     */    public function fecthMadere(ProduitsRepository $produitsRepository): Response    {        return $this->ProduitByfourByPays('pto', 2, 5);    }    /**     * @Route("/PTO/PortugalSejour", name="Portugal_Sejour_PTO", methods={"GET"})     *     */    public function fecthPS(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestationByPays(2,2,3);    }    /**     * @Route("/PTO/PortugalCircuit", name="Portugal_Circuit_PTO", methods={"GET"})     *     */    public function fecth12(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestationByPays(2,2,3);    }    /**     * @Route("/PTO/PortugalWeekEnd", name="Portugal_WE_PTO", methods={"GET"})     *     */    public function fecth3(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestationByPays(2,3,3);    }    /**     * @Route("/PTO/CapVertWeekEnd", name="CapVert_WE_PTO", methods={"GET"})     *     */    public function fecth4(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestationByPays(2,3,4);    }    /**     * @Route("/PTO/CapVertCircuit", name="CapVert_Circuit_PTO", methods={"GET"})     *     */    public function fecth5(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestationByPays(2,1,4);    }    /**     * @Route("/PTO/CapVertSejour", name="CapVert_Sejour_PTO", methods={"GET"})     *     */    public function fecth6(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestationByPays(2,2,4);    }    /**     * @Route("/PTO/MadereWeekEnd", name="Madere_WE_PTO", methods={"GET"})     *     */    public function fecth7(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestationByPays(2,3,5);    }    /**     * @Route("/PTO/MadereCircuit", name="Madere_Circuit_PTO", methods={"GET"})     *     */    public function fecth8(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestationByPays(2,1,5);    }    /**     * @Route("/PTO/MadereSejour", name="Madere_Sejour_PTO", methods={"GET"})     *     */    public function fecth9(ProduitsRepository $produitsRepository): Response    {        return $this->produitByFournisseurByPrestationByPays(2,2,5);    }        /**     * @param $fourn     * @param $n2     * @param $n4     * @return mixed     */    private function produitCible($fourn, $n2, $n4)    {        foreach ($this->indexPrestation as $key => $value) {            $tab[$value] = $this->getDoctrine()->getRepository(Produits::class)->findByPFP(1, $n2, $n4);        }        return $this->render('produits/destination.html.twig', [            'test' => $fourn,            $tab        ]);    }    /**     * @param $four     * @param $prest     * @param $pays     * @return Response     */    private function produitByFournisseurByPrestationByPays($four, $prest, $pays): Response    {        $tab = $this->getDoctrine()->getRepository(TypePrestation::class)->findAll();        $result=[];        for ($i = 0; $i < 3; $i++) {            if($tab[$i]->getId()==$prest){                $result[$tab[$i]->getType()]=$this->getDoctrine()->getRepository(Produits::class)->findByPFP($prest, $four, $pays);                  //  ->findByFourPres( $tab[$i]->getId(),$n);                $result['test' ]=$four;            }        }        return $this->render('produits/fournisseur.html.twig',$result);        //return $this->render('produits/destination.html.twig', [         //   'test' => 'pto',         //   'weekends' => $this->getDoctrine()->getRepository(Produits::class)->findByPFP(3, 2, 4),        //]);    }    /**     * @param $four     * @param $n     * @return Response     */    private function produitByFournisseurByPrestation($four, $nFour,$pres): Response    {        $tab = $this->getDoctrine()->getRepository(TypePrestation::class)->findAll();        $result=[];        for ($i = 0; $i < 3; $i++) {            dump($tab[$i]->getId().$pres.$nFour);           if($tab[$i]->getId()==$pres){            $result[$tab[$i]->getType()]=$this->getDoctrine()->getRepository(Produits::class)->findByFourPres($nFour ,$tab[$i]->getId());            dump($result);            $result['test' ]=$four;            }        }        dump($result);        return $this->render('produits/fournisseur.html.twig',$result);        // return $this->render('produits/fournisseur.html.twig', [        //    'test' => 'pto',        //   'sejours' => $this->getDoctrine()->getRepository(Produits::class)->findByFourPres(2, 2),        //]);    }    /**     * @param $four     * @param $n     * @return Response     */    private function produitByFournisseur($four, $n): Response    {        $tab = $this->getDoctrine()->getRepository(TypePrestation::class)->findAll();        $result=[];        for ($i = 0; $i < 3; $i++) {            $result[$tab[$i]->getType()]=$this->getDoctrine()->getRepository(Produits::class)->findByFourPres($n, $tab[$i]->getId());            $result['test' ]=$four;       }        return $this->render('produits/fournisseur.html.twig',$result);            //, [            //'test' => $four,           // 'produits' => $this->getDoctrine()->getRepository(Produits::class)->findByFournisseur($n),           // 'circuits' => $this->getDoctrine()->getRepository(Produits::class)->findByFourPres($n, 1),           // 'sejours' => $this->getDoctrine()->getRepository(Produits::class)->findByFourPres($n, 2),           // 'weekends' => $this->getDoctrine()->getRepository(Produits::class)->findByFourPres($n, 3),       // ]);    }    /**     * @param $four     * @param $f     * @param $p     * @return Response     */    private function ProduitByfourByPays($four, $f, $p): Response    {        return $this->render('produits/destination.html.twig', [            'test' => $four,            'circuits' => $this->getDoctrine()->getRepository(Produits::class)->findByPFP(1, $f, $p),            'sejours' => $this->getDoctrine()->getRepository(Produits::class)->findByPFP(2, $f, $p),            'weekends' => $this->getDoctrine()->getRepository(Produits::class)->findByPFP(3, $f, $p)        ]);    }}